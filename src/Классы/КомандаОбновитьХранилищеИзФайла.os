
///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Перем Лог;
Перем ИспользуемаяВерсияПлатформы;

// Интерфейсная процедура, выполняет регистрацию команды и настройку парсера командной строки
//   
// Параметры:
//   ИмяКоманды 	- Строка										- Имя регистрируемой команды
//   Парсер 		- ПарсерАргументовКоманднойСтроки (cmdline)		- Парсер командной строки
//
Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Обновляет хранилище конфигурации из указанного cf-файла");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-params",
		"Файлы JSON содержащие значения параметров,
		|могут быть указаны несколько файлов разделенные "";""
		|(параметры командной строки имеют более высокий приоритет)");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-storage-path",
		"Адрес хранилища конфигурации");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-storage-user",
		"Пользователь хранилища конфигурации");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-storage-pwd",
		"Пароль пользователя хранилища конфигурации");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-ib-path",
		"Адрес ИБ для выполнения обновления (если не указан, то будет создана временная база)");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-ib-user",
		"Пользователь ИБ для обновления (если указано -upddb-path)");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-ib-pwd",
		"Пароль пользователя ИБ для обновления (если указано -upddb-path)");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-upd-comment",
		"Комментарий обновления");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-cf-path",
		"Путь к cf-файлу обновления");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-delcf",
		"Удалить cf-файл после обновления");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-v8version",
		"Версия платформы 1С");

    Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры //ЗарегистрироватьКоманду()

// Интерфейсная процедура, выполняет текущую команду
//   
// Параметры:
//   ПараметрыКоманды 	- Соответствие						- Соответствие параметров команды и их значений
//
// Возвращаемое значение:
//	Число - код возврата команды
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
    
	ЗапускПриложений.ПрочитатьПараметрыКомандыИзФайла(ПараметрыКоманды["-params"], ПараметрыКоманды, "-");
	
	Хранилище_Адрес					= ПараметрыКоманды["-storage-path"];
	Хранилище_Пользователь			= ПараметрыКоманды["-storage-user"];
	Хранилище_ПарольПользователя	= ПараметрыКоманды["-storage-pwd"];
	ИБ_Адрес						= ПараметрыКоманды["-ib-path"];
	ИБ_ИмяПользователя				= ПараметрыКоманды["-ib-user"];
	ИБ_ПарольПользователя			= ПараметрыКоманды["-ib-pwd"];
	КомментарийОбновления			= ПараметрыКоманды["-upd-comment"];
	ПутьКФайлуОбновления			= ПараметрыКоманды["-cf-path"];
	УдалитьФайлОбновления			= ПараметрыКоманды["-delcf"];
	ИспользуемаяВерсияПлатформы		= ПараметрыКоманды["-v8version"];
	
	ВозможныйРезультат = МенеджерКомандПриложения.РезультатыКоманд();

	Если ПустаяСтрока(Хранилище_Адрес) Тогда
		Лог.Ошибка("Не указан адрес хранилища конфигурации");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(Хранилище_Пользователь) Тогда
		Лог.Ошибка("Не указан пользователь хранилища конфигурации");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(ПутьКФайлуОбновления) Тогда
		Лог.Информация("Не указан путь cf-файлу обновления");
	КонецЕсли;

	Лог.Информация("Начало обновления хранилища");

	Попытка
		ОбновитьХранилищеИзФайла(Хранилище_Адрес
							   , Хранилище_Пользователь
							   , Хранилище_ПарольПользователя
							   , ИБ_Адрес
							   , ИБ_ИмяПользователя
							   , ИБ_ПарольПользователя
							   , ПутьКФайлуОбновления
							   , КомментарийОбновления
							   , УдалитьФайлОбновления
							   , ИспользуемаяВерсияПлатформы);

		Возврат ВозможныйРезультат.Успех;
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
		Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
	КонецПопытки;

КонецФункции

// Обновляет хранилище из указанного cf-файла
//   
// Параметры:
//   Хранилище_Адрес				- Строка - Адрес хранилища конфигурации
//   Хранилище_ИмяПользователя	 	- Строка - Пользователь хранилища конфигурации
//   Хранилище_ПарольПользователя 	- Строка - Пароль пользователя хранилища конфигурации
//   ИБ_Адрес						- Строка - Строка подключения к ИБ для обновления (если не указана, то будет создана временная база)
//   ИБ_ИмяПользователя			 	- Строка - Пользователь ИБ для обновления
//   ИБ_ПарольПользователя		 	- Строка - Пароль пользователя ИБ для обновления
//   ПутьКФайлуОбновления	 		- Строка - Путь к cf-файлу обновления
//   УдалитьФайлОбновления	 		- Булево - Истина - удалить cf-файл после обновления
//	 КомментарийОбновления			- Строка - Комментарий при помещении обновленной конфигурации в хранилище
//
Процедура ОбновитьХранилищеИзФайла(Хранилище_Адрес
								 , Хранилище_ИмяПользователя
								 , Хранилище_ПарольПользователя = ""
								 , ИБ_Адрес = ""
								 , ИБ_ИмяПользователя = ""
								 , ИБ_ПарольПользователя= ""
								 , ПутьКФайлуОбновления
								 , КомментарийОбновления = ""
								 , УдалитьФайлОбновления = Ложь
								 , ИспользуемаяВерсияПлатформы)
	
	РабочийКаталог = ОбъединитьПути(КаталогВременныхФайлов(), ПолучитьИмяВременногоФайла(""));

	Конфигуратор = ЗапускПриложений.НастроитьКонфигуратор(РабочийКаталог
														, ИБ_Адрес
														, ИБ_ИмяПользователя
														, ИБ_ПарольПользователя
														, ИспользуемаяВерсияПлатформы);
	
	Если ПустаяСтрока(ИБ_Адрес) Тогда
		Лог.Информация("Создана временная база");
		Конфигуратор.ПодключитьсяКХранилищу(Хранилище_Адрес
										  , Хранилище_ИмяПользователя
										  , Хранилище_ПарольПользователя
										  , Истина);

	КонецЕсли;

	Конфигуратор.ЗахватитьОбъектыВХранилище(Хранилище_Адрес
										  , Хранилище_ИмяПользователя
										  , Хранилище_ПарольПользователя);

	Лог.Информация("Выполнен захват объектов в хранилище");
	
	Конфигуратор.ОбъединитьКонфигурациюСФайлом(ПутьКФайлуОбновления
											 , ПолучитьФайлНастроекОбъединения(РабочийКаталог));

	Лог.Информация("Выполнено объединение конфигураций");
											 
	Если УдалитьФайлОбновления Тогда
		УдалитьФайлы(ПутьКФайлуОбновления);
		Лог.Информация("Удален cf-файл обновления %1", ПутьКФайлуОбновления);
	КонецЕсли;

	Конфигуратор.ПоместитьИзмененияОбъектовВХранилище(Хранилище_Адрес
													, Хранилище_ИмяПользователя
													, Хранилище_ПарольПользователя
													,
													, КомментарийОбновления
													, Истина);

	Лог.Информация("Изменения помещены в хранилище");

	ЗапускПриложений.УдалитьРабочийКаталог(РабочийКаталог);

КонецПроцедуры //ОбновитьХранилищеИзФайла()

// Получает текст файла настроек объединения конфигураций
//   
// Возвращаемое значение:
// 	Строка - текст файла настроек объединения конфигураций
//
Функция ПолучитьТекстНастроекОбъединения()

	ТекстНастроек = "<?xml version=""1.0"" encoding=""UTF-8""?>
					|<Settings xmlns=""http://v8.1c.ru/8.3/config/merge/settings"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" version=""1.1"" platformVersion=""8.3.11"">
					|	<Parameters>
					|		<ConfigurationsRelation>SecondConfigurationIsDescendantOfMainConfiguration</ConfigurationsRelation>
					|		<AllowMainConfigurationObjectDeletion>true</AllowMainConfigurationObjectDeletion>
					|		<CopyObjectsMode>false</CopyObjectsMode>
					|	</Parameters>
					|</Settings>";
	
	Возврат ТекстНастроек;
	
КонецФункции //ПолучитьТекстНастроекОбъединения()

// Получает путь к файлу настроек объединения конфигураций
//   
// Параметры:
// 	РабочийКаталог			- Строка - путь к каталогу для сохранения файла настроек объединения
//
// Возвращаемое значение:
// 	Строка - путь к файлу настроек объединения конфигураций
//
Функция ПолучитьФайлНастроекОбъединения(РабочийКаталог)
	
		ПутьКФайлу = ОбъединитьПути(РабочийКаталог, "MergeSettings.xml");

		Текст = Новый ТекстовыйДокумент();
		Текст.УстановитьТекст(ПолучитьТекстНастроекОбъединения());
		Текст.Записать(ПутьКФайлу);
		
		Возврат ПутьКФайлу;
		
КонецФункции //ПолучитьФайлНастроекОбъединения()
	
Лог = Логирование.ПолучитьЛог("ktb.app.yadt");