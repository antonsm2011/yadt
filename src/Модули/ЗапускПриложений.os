
// Добавляет к строке отрывающую и закрывающую кавычки при их отсутствии
//   
// Параметры:
//   Строка 	- Строка - Строка для обработки
//
// Возвращаемое значение:
//		Строка	- Обработанная строка
//
Функция ОбернутьВКавычки(Знач Строка) Экспорт
	Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции //ОбернутьВКавычки()

Функция НастроитьКонфигуратор(КаталогСборки = Неопределено
							, СтрокаПодключения = Неопределено
							, ИмяПользователя = Неопределено
							, ПарольПользователя = Неопределено
							, ИспользуемаяВерсияПлатформы = Неопределено) Экспорт
	
	Конфигуратор = Новый УправлениеКонфигуратором;

	Если НЕ ЗначениеЗаполнено(КаталогСборки) Тогда
		КаталогСборки = КаталогВременныхФайлов();
	КонецЕсли;

	Конфигуратор.КаталогСборки(КаталогСборки);

	Если ЗначениеЗаполнено(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, ИмяПользователя, ПарольПользователя);
	КонецЕсли;

	Если НЕ ИспользуемаяВерсияПлатформы = Неопределено Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ИспользуемаяВерсияПлатформы);
	КонецЕсли;

	Возврат Конфигуратор;
КонецФункции //НастроитьКонфигуратор()

// Выполняет чтение параметров из списка JSON-файлов
//   
// Параметры:
//   ФайлыПараметров 	- Строка		- Список путей к JSON-файлам параметров, разделенных ";"
//	 ПрефиксПараметров	- Строка		- Префикс параметров (например, "-"), добавляемый к имени параметра при чтении,
//										  если не указан в файле параметров
//   ПараметрыКоманды 	- Соответствие	- Соответствие 
//   ОшибкиЧтения	 	- Соответствие	- Ошибки чтения параметров
//
// Возвращаемое значение:
//   Соответствие - Параметры указанные в файлах (Ключ - Имя параметра, Значение - значение параметра)
//
Процедура ПрочитатьПараметрыКомандыИзФайла(ФайлыПараметров, ПараметрыКоманды, ПрефиксПараметров = "", ОшибкиЧтения = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФайлыПараметров) Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайловПараметров = Новый Массив;
	МассивФайловПараметров.Добавить(Неопределено);

	Для Каждого ТекФайл Из СтрРазделить(ФайлыПараметров, ";") Цикл
		МассивФайловПараметров.Добавить(ТекФайл);
	КонецЦикла;

	Параметры = ЧтениеПараметров.Прочитать(МассивФайловПараметров, ОшибкиЧтения);
	
	Для Каждого	ТекПараметр Из Параметры Цикл
		Если ПараметрыКоманды.Получить(ТекПараметр.Значение) = Неопределено Тогда
			ИмяПараметра = ТекПараметр.Ключ;

			Если ЗначениеЗаполнено(ПрефиксПараметров) Тогда
				ИмяПараметра = ?(Лев(ИмяПараметра, СтрДлина(ПрефиксПараметров)) = ИмяПараметра
							   , ИмяПараметра
							   , ПрефиксПараметров + ИмяПараметра);
			КонецЕсли;
			
			ПараметрыКоманды.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры //ПрочитатьПараметрыКомандыИзФайла()
	
// Производит очистку и удаление рабочего каталога
//   
// Параметры:
//   РабочийКаталог 	- Строка - Путь к рабочему каталогу, в котором выполняется обработка конфигурации;
//
Процедура УдалитьРабочийКаталог(Знач РабочийКаталог) Экспорт
	
		ЕстьОшибкаУдаления = Ложь;
		Для НомерПопытки = 1 По 2 Цикл
			МассивФайлов = НайтиФайлы(РабочийКаталог, ПолучитьМаскуВсеФайлы());
			Если МассивФайлов.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
	
			Для Каждого ЭлементМассива Из МассивФайлов Цикл
				
				Попытка
					УдалитьФайлы(ЭлементМассива.ПолноеИмя);
				Исключение
					ЕстьОшибкаУдаления = Истина;
					Если НомерПопытки = 2 Тогда
						ВызватьИсключение "Ошибка очистки рабочего каталога";
					КонецЕсли;
				КонецПопытки;
			КонецЦикла;
	
			Если Не ЕстьОшибкаУдаления Тогда
				Прервать;
			КонецЕсли;
	
		КонецЦикла;
	
		Попытка
			УдалитьФайлы(РабочийКаталог);
		Исключение
			ЕстьОшибкаУдаления = Истина;
			Если НомерПопытки = 2 Тогда
				ВызватьИсключение "Ошибка удаления рабочего каталога";
			КонецЕсли;
		КонецПопытки;
	
	КонецПроцедуры //УдалитьРабочийКаталог()
	
	